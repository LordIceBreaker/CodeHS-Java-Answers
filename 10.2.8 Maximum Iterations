import java.util.*;

public class BinarySearch {

    static int count;

    public static void main(String[] args) {
        int[] sizes = {50, 500, 5000, 50000};
        for (int size : sizes) {
            count = 0;
            int[] array = generateArrayOfLength(size);
            int target = array[(int)(Math.random() * size)];
            binaryRec(array, target, 0, size - 1);
            System.out.println("Array Size: " + size);
            System.out.println("Max iterations: " + binaryMax(size));
            System.out.println("Actual iterations: " + count);
            System.out.println();
        }
    }

    public static int binaryRec(int[] array, int target, int begin, int end) {
        if (begin <= end) {
            int mid = (begin + end) / 2;
            count++;
            if (target == array[mid]) {
                return mid;
            }
            if (target < array[mid]) {
                return binaryRec(array, target, begin, mid - 1);
            }
            if (target > array[mid]) {
                return binaryRec(array, target, mid + 1, end);
            }
        }
        return -1; //Alternate Base Case - not found
    }

    public static int[] generateArrayOfLength(int length) {
        int[] arr = new int[length];
        for(int i = 0; i < length; i++) {
            arr[i] = (int)(Math.random() * 100);
        }
        Arrays.sort(arr);
        return arr;
    }

    private static int binaryMax(int length) {
        return (int) (Math.log(length) / Math.log(2)) + 1;
    }
}
